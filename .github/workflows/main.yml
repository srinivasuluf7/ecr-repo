name: Build and Push Docker Image

on:
  push:
    branches:
      - main  # or the branch you want to trigger the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

    - name: Build Docker image
      run: docker build -t my-image .

    - name: Tag Docker image
      run: docker tag my-image:latest ${{ secrets.ECR_REPOSITORY_URI }}:latest

    - name: Push Docker image
      run: docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest
  deploy:
    needs: build  # Run this job only after the build job succeeds
    runs-on: ubuntu-latest

    steps:
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update ECS Task Definition with new image
      id: taskdef
      run: |
        # Fetch the current task definition JSON
        aws ecs describe-task-definition --task-definition ecs_task > task-def.json
        
        # Use jq to update the container image in the task definition JSON
        jq '.taskDefinition.containerDefinitions[0].image = "'${{ secrets.ECR_REPOSITORY_URI }}:latest'"' task-def.json > new-task-def.json
        
        # Register the updated task definition
        aws ecs register-task-definition --cli-input-json file://new-task-def.json

    - name: Update ECS Service
      run: |
        # Update the ECS service to use the new task definition revision
        aws ecs update-service --cluster my-cluster --service ecs_service --force-new-deployment  
